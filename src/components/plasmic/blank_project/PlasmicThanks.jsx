// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qLbKtmKmYSPMeUDVUL9rt9
// Component: -qygjhSzAI
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: qLbKtmKmYSPMeUDVUL9rt9/projectcss
import sty from "./PlasmicThanks.module.css"; // plasmic-import: -qygjhSzAI/css

export const PlasmicThanks__VariantProps = new Array();

export const PlasmicThanks__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicThanks__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"goalFrame"}
            data-plasmic-override={overrides.goalFrame}
            className={classNames(projectcss.all, sty.goalFrame)}
          >
            <div
              data-plasmic-name={"group14"}
              data-plasmic-override={overrides.group14}
              className={classNames(projectcss.all, sty.group14)}
            >
              <div
                data-plasmic-name={"box"}
                data-plasmic-override={overrides.box}
                className={classNames(projectcss.all, sty.box)}
              />

              <div
                data-plasmic-name={"caption"}
                data-plasmic-override={overrides.caption}
                className={classNames(projectcss.all, sty.caption)}
              >
                <div
                  data-plasmic-name={"selectAtLeast4GoalsToContinue"}
                  data-plasmic-override={
                    overrides.selectAtLeast4GoalsToContinue
                  }
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.selectAtLeast4GoalsToContinue
                  )}
                >
                  {"select at least 4 goals to continue "}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jk61S
                  )}
                >
                  {"Select Goals"}
                </div>
              </div>

              <div
                data-plasmic-name={"group13"}
                data-plasmic-override={overrides.group13}
                className={classNames(projectcss.all, sty.group13)}
              >
                <div
                  data-plasmic-name={"rectangle3"}
                  data-plasmic-override={overrides.rectangle3}
                  className={classNames(projectcss.all, sty.rectangle3)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__udbCi
                  )}
                >
                  {"Submit"}
                </div>
              </div>

              <div
                data-plasmic-name={"goals"}
                data-plasmic-override={overrides.goals}
                className={classNames(projectcss.all, sty.goals)}
              >
                <div
                  data-plasmic-name={"goal"}
                  data-plasmic-override={overrides.goal}
                  className={classNames(projectcss.all, sty.goal)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k4FOa
                    )}
                  >
                    {"Process Automation"}
                  </div>

                  <div
                    data-plasmic-name={"rectangle2"}
                    data-plasmic-override={overrides.rectangle2}
                    className={classNames(projectcss.all, sty.rectangle2)}
                  />
                </div>

                <div
                  data-plasmic-name={"goal2"}
                  data-plasmic-override={overrides.goal2}
                  className={classNames(projectcss.all, sty.goal2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Klql
                    )}
                  >
                    {"Product Optimization"}
                  </div>

                  <div
                    data-plasmic-name={"rectangle4"}
                    data-plasmic-override={overrides.rectangle4}
                    className={classNames(projectcss.all, sty.rectangle4)}
                  />
                </div>

                <div
                  data-plasmic-name={"goal3"}
                  data-plasmic-override={overrides.goal3}
                  className={classNames(projectcss.all, sty.goal3)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ajLz4
                    )}
                  >
                    {"Project Management"}
                  </div>

                  <div
                    data-plasmic-name={"rectangle5"}
                    data-plasmic-override={overrides.rectangle5}
                    className={classNames(projectcss.all, sty.rectangle5)}
                  />
                </div>

                <div
                  data-plasmic-name={"goal4"}
                  data-plasmic-override={overrides.goal4}
                  className={classNames(projectcss.all, sty.goal4)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xukXb
                    )}
                  >
                    {"OKR"}
                  </div>

                  <div
                    data-plasmic-name={"rectangle6"}
                    data-plasmic-override={overrides.rectangle6}
                    className={classNames(projectcss.all, sty.rectangle6)}
                  />
                </div>

                <div
                  data-plasmic-name={"goal5"}
                  data-plasmic-override={overrides.goal5}
                  className={classNames(projectcss.all, sty.goal5)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__geE0N
                    )}
                  >
                    {"Marketing Automation"}
                  </div>

                  <div
                    data-plasmic-name={"rectangle7"}
                    data-plasmic-override={overrides.rectangle7}
                    className={classNames(projectcss.all, sty.rectangle7)}
                  />
                </div>

                <div
                  data-plasmic-name={"goal6"}
                  data-plasmic-override={overrides.goal6}
                  className={classNames(projectcss.all, sty.goal6)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___36Krh
                    )}
                  >
                    {"Product Documentation"}
                  </div>

                  <div
                    data-plasmic-name={"rectangle8"}
                    data-plasmic-override={overrides.rectangle8}
                    className={classNames(projectcss.all, sty.rectangle8)}
                  />
                </div>

                <div
                  data-plasmic-name={"goal7"}
                  data-plasmic-override={overrides.goal7}
                  className={classNames(projectcss.all, sty.goal7)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__knNrK
                    )}
                  >
                    {"Product Betterment"}
                  </div>

                  <div
                    data-plasmic-name={"rectangle9"}
                    data-plasmic-override={overrides.rectangle9}
                    className={classNames(projectcss.all, sty.rectangle9)}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "goalFrame",
    "group14",
    "box",
    "caption",
    "selectAtLeast4GoalsToContinue",
    "group13",
    "rectangle3",
    "goals",
    "goal",
    "rectangle2",
    "goal2",
    "rectangle4",
    "goal3",
    "rectangle5",
    "goal4",
    "rectangle6",
    "goal5",
    "rectangle7",
    "goal6",
    "rectangle8",
    "goal7",
    "rectangle9"
  ],

  goalFrame: [
    "goalFrame",
    "group14",
    "box",
    "caption",
    "selectAtLeast4GoalsToContinue",
    "group13",
    "rectangle3",
    "goals",
    "goal",
    "rectangle2",
    "goal2",
    "rectangle4",
    "goal3",
    "rectangle5",
    "goal4",
    "rectangle6",
    "goal5",
    "rectangle7",
    "goal6",
    "rectangle8",
    "goal7",
    "rectangle9"
  ],

  group14: [
    "group14",
    "box",
    "caption",
    "selectAtLeast4GoalsToContinue",
    "group13",
    "rectangle3",
    "goals",
    "goal",
    "rectangle2",
    "goal2",
    "rectangle4",
    "goal3",
    "rectangle5",
    "goal4",
    "rectangle6",
    "goal5",
    "rectangle7",
    "goal6",
    "rectangle8",
    "goal7",
    "rectangle9"
  ],

  box: ["box"],
  caption: ["caption", "selectAtLeast4GoalsToContinue"],
  selectAtLeast4GoalsToContinue: ["selectAtLeast4GoalsToContinue"],
  group13: ["group13", "rectangle3"],
  rectangle3: ["rectangle3"],
  goals: [
    "goals",
    "goal",
    "rectangle2",
    "goal2",
    "rectangle4",
    "goal3",
    "rectangle5",
    "goal4",
    "rectangle6",
    "goal5",
    "rectangle7",
    "goal6",
    "rectangle8",
    "goal7",
    "rectangle9"
  ],

  goal: ["goal", "rectangle2"],
  rectangle2: ["rectangle2"],
  goal2: ["goal2", "rectangle4"],
  rectangle4: ["rectangle4"],
  goal3: ["goal3", "rectangle5"],
  rectangle5: ["rectangle5"],
  goal4: ["goal4", "rectangle6"],
  rectangle6: ["rectangle6"],
  goal5: ["goal5", "rectangle7"],
  rectangle7: ["rectangle7"],
  goal6: ["goal6", "rectangle8"],
  rectangle8: ["rectangle8"],
  goal7: ["goal7", "rectangle9"],
  rectangle9: ["rectangle9"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicThanks__ArgProps,
          internalVariantPropNames: PlasmicThanks__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicThanks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicThanks";
  } else {
    func.displayName = `PlasmicThanks.${nodeName}`;
  }
  return func;
}

export const PlasmicThanks = Object.assign(
  // Top-level PlasmicThanks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    goalFrame: makeNodeComponent("goalFrame"),
    group14: makeNodeComponent("group14"),
    box: makeNodeComponent("box"),
    caption: makeNodeComponent("caption"),
    selectAtLeast4GoalsToContinue: makeNodeComponent(
      "selectAtLeast4GoalsToContinue"
    ),

    group13: makeNodeComponent("group13"),
    rectangle3: makeNodeComponent("rectangle3"),
    goals: makeNodeComponent("goals"),
    goal: makeNodeComponent("goal"),
    rectangle2: makeNodeComponent("rectangle2"),
    goal2: makeNodeComponent("goal2"),
    rectangle4: makeNodeComponent("rectangle4"),
    goal3: makeNodeComponent("goal3"),
    rectangle5: makeNodeComponent("rectangle5"),
    goal4: makeNodeComponent("goal4"),
    rectangle6: makeNodeComponent("rectangle6"),
    goal5: makeNodeComponent("goal5"),
    rectangle7: makeNodeComponent("rectangle7"),
    goal6: makeNodeComponent("goal6"),
    rectangle8: makeNodeComponent("rectangle8"),
    goal7: makeNodeComponent("goal7"),
    rectangle9: makeNodeComponent("rectangle9"),
    // Metadata about props expected for PlasmicThanks
    internalVariantProps: PlasmicThanks__VariantProps,
    internalArgProps: PlasmicThanks__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicThanks;
/* prettier-ignore-end */
